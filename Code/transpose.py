import os
import pandas as pd

def convert_to_long_format(df):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å wide ‡πÄ‡∏õ‡πá‡∏ô long format ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏π‡∏ï‡∏£
    """
    print("Columns in DataFrame:", df.columns.tolist())

    # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å
    main_cols = df.columns[1:10].tolist()

    # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    month_cols = df.columns[11:17].tolist() + df.columns[18:24].tolist()

    # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    desired_extra_cols = [
        "Target reduction (Start from Jul'25)",
        'ratio_plan_MC', 'ratio_result_MC',
        'ratio_plan_ASSY', 'ratio_result_ASSY'
    ]

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    for col in desired_extra_cols:
        if col not in df.columns:
            df[col] = None

    print("Main columns (B-K):", main_cols)
    print("Month columns (L-Q,S-X):", month_cols)
    print("Extra columns used:", desired_extra_cols)

    # melt ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df_long = pd.melt(
        df,
        id_vars=main_cols + desired_extra_cols,
        value_vars=month_cols,
        var_name='Month',
        value_name='Plan'
    )

    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    desired_order = main_cols + ['Month', 'Plan'] + desired_extra_cols
    existing_cols = [col for col in desired_order if col in df_long.columns]
    df_long = df_long[existing_cols]

    # ‡πÅ‡∏õ‡∏•‡∏á Plan ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    df_long['Plan'] = pd.to_numeric(df_long['Plan'], errors='coerce').fillna(0)

    # ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
    for col in desired_extra_cols:
        df_long[col] = None

    return df_long

def save_master_file(df_long, output_path):
    """
    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå Expense_Final_Long_Format2.xlsx
    """
    master_file_path = os.path.join(output_path, "Expense_Final_Long_Format2.xlsx")
    try:
        df_long.to_excel(master_file_path, index=False)
        print(f"‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {master_file_path}")
        return True
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å: {e}")
        return False

def save_monthly_files(df_long, database_path):
    """
    ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏π‡∏ï‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    """
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô...")

    if not os.path.exists(database_path):
        print(f"‚ùå ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {database_path} ‡πÑ‡∏°‡πà‡∏û‡∏ö")
        return False

    saved_files = []

    for month in df_long['Month'].unique():
        if pd.isna(month):
            continue

        df_month = df_long[df_long['Month'] == month].copy()

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        df_month["Target reduction (Start from Jul'25)"] = df_month['Plan'] * 0.1  # 10% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ Plan
        df_month['ratio_plan_MC'] = df_month['Plan'] * 0.05 / 100  # 0.05%
        df_month['ratio_result_MC'] = df_month['Plan'] * 0.03 / 100  # 0.03%
        df_month['ratio_plan_ASSY'] = df_month['Plan'] * 0.02 / 100  # 0.02%
        df_month['ratio_result_ASSY'] = df_month['Plan'] * 0.01 / 100  # 0.01%

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        safe_month_name = str(month).replace('/', '_').replace('\\', '_').replace(':', '_')
        month_file_path = os.path.join(database_path, f"{safe_month_name}.xlsx")

        try:
            df_month.to_excel(month_file_path, index=False)
            saved_files.append(month_file_path)
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {month_file_path}")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {month}: {e}")

    print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(saved_files)} ‡πÑ‡∏ü‡∏•‡πå")
    return len(saved_files) > 0

def main():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
    """
    input_file = r"D:\Budget\Budget_BP\Data\expense.xlsx"
    output_get_path = r"D:\Budget\Budget_BP\Get"
    output_database_path = r"D:\Budget\Budget_BP\Database"

    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Budget...")
    print(f"üìÅ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å: {input_file}")
    print(f"üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà: {output_get_path}")
    print(f"üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà: {output_database_path}")

    if not os.path.exists(input_file):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {input_file}")
        return False

    for path in [output_get_path, output_database_path]:
        if not os.path.exists(path):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {path}")
            return False

    try:
        df_main = pd.read_excel(
            input_file,
            sheet_name='Living cost merge',
            header=0,
            skiprows=2,
            engine='openpyxl'
        )

        print(f"üìä ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ {len(df_main)} ‡πÅ‡∏ñ‡∏ß, {len(df_main.columns)} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
        print(f"‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {df_main.columns.tolist()[:10]}...")

        df_long = convert_to_long_format(df_main)
        print(f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(df_long)} ‡πÅ‡∏ñ‡∏ß")

        if not save_master_file(df_long, output_get_path):
            return False

        if not save_monthly_files(df_long, output_database_path):
            return False

        print("üéâ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        return True

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\n‚úÖ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    else:
        print("\n‚ùå ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")